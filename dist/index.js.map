{"version":3,"sources":["index.js"],"names":["regionToSVG","region","width","height","regionType","points","map","x","y","join","color","centerX","centerY","sampleToSVG","sample","showImage","annotationOpacity","imageUrl","annotation","module","exports"],"mappings":";AAAA,SAASA,EAAYC,EAA2B,GAAjBC,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAChCF,MAAsB,YAAtBA,EAAOG,WACkBH,oBAAAA,OAAAA,EAAOI,OAC/BC,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,EAAGC,EAAAA,EAAAA,EAAQ,MAAA,CAACD,EAAIL,EAAOM,EAAIL,GAAQM,KAAK,OAC/CA,KAAK,MACQR,yBAAAA,OAAAA,EAAOS,MAHvB,kBAI+B,iBAAtBT,EAAOG,WACMH,eAAAA,OAAAA,EAAOS,MAC3B,SAAA,QAACT,EAAOU,QAAUV,EAAOC,MAAQ,GAAKA,EAChC,SAAA,QAACD,EAAOW,QAAUX,EAAOE,OAAS,GAAKA,EAC7CF,aAAAA,OAAAA,EAAOC,MAAQA,EACJD,cAAAA,OAAAA,EAAOE,OAASA,EAJ7B,aADK,EAST,SAASU,EACPC,EAEA,GADEZ,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAAQY,EAAAA,EAAAA,UAAAA,OAAY,IAAA,GAC7B,EADmCC,EAAAA,EAAAA,kBAAAA,OAAoB,IAAA,EAAA,GACvD,EACsBd,MAAAA,eAAAA,OAAAA,EAAkBC,cAAAA,OAAAA,EAEpCW,YAAAA,OAAAA,EAAOG,UAAYF,EAC4BD,2CAAAA,OAAAA,EAAOG,SAAoBf,aAAAA,OAAAA,EAAkBC,cAAAA,OAAAA,EACxF,QAAA,GAEe,6BAAA,OAACY,EAAgBC,EAAJ,EAChCF,YAAAA,OAAAA,EAAOI,WACNZ,IAAI,SAACL,GAAWD,OAAAA,EAAYC,EAAQ,CAAEC,MAAAA,EAAOC,OAAAA,MAC7CM,KAAK,MATV,wBAcFU,OAAOC,QAAU,CAAEpB,YAAAA,EAAaa,YAAAA","file":"index.js","sourceRoot":"..","sourcesContent":["function regionToSVG(region, { width, height }) {\n  if (region.regionType === \"polygon\") {\n    return `<polygon points=\"${region.points\n      .map(({ x, y }) => [x * width, y * height].join(\" \"))\n      .join(\", \")}\"\n            fill=\"${region.color}\" stroke=\"\" />`\n  } else if (region.regionType === \"bounding-box\") {\n    return `<rect fill=\"${region.color}\" x=\"${\n      (region.centerX - region.width / 2) * width\n    }\" y=\"${(region.centerY - region.height / 2) * height}\" width=\"${\n      region.width * width\n    }\" height=\"${region.height * height}\" />`\n  }\n}\n\nfunction sampleToSVG(\n  sample,\n  { width, height, showImage = true, annotationOpacity = 0.3 }\n) {\n  return `<svg width=\"${width}\" height=\"${height}\">\n    ${\n      sample.imageUrl && showImage\n        ? `<image preserveAspectRatio=\"none\" href=\"${sample.imageUrl}\" width=\"${width}\" height=\"${height}\" />`\n        : \"\"\n    }\n    <g style=\"opacity: ${!showImage ? 1 : annotationOpacity}\">\n    ${sample.annotation\n      .map((region) => regionToSVG(region, { width, height }))\n      .join(\"\\n\")}\n    </g>\n  </svg>`\n}\n\nmodule.exports = { regionToSVG, sampleToSVG }\n"]}